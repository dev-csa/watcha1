{"version":3,"sources":["index.js"],"names":["btnScissor","document","getElementById","btnRock","btnPaper","myScore","querySelector","computerScreen","timer","btnStart","btnEnd","inputGame","disabled","initialState","score","count","win","draw","computers","nGame","gameEnd","result","store","getState","textContent","reducer","state","action","type","createStore","arrayRSP","scoreReset","dispatch","showResult","whatcom","parseInt","alert","subscribe","onSubmit","e","preventDefault","mine","target","id","random","Math","floor","computerRSP","comGame","addEventListener","value"],"mappings":"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","file":"static/js/main.3a66ff01.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {createStore} from 'redux';\n\nconst btnScissor = document.getElementById(\"ss\");\nconst btnRock = document.getElementById(\"rr\");\nconst btnPaper = document.getElementById(\"pp\");\n// const btn = document.querySelectorAll(\"button\");\nconst ul = document.querySelector(\"ul\");\nconst myScore = document.querySelector(\".myscore\");\nconst computerScreen = document.querySelector(\".computer\");\nconst timer = document.querySelector(\".timer\");\nconst btnStart = document.querySelector(\".btnStart\");\nconst btnEnd = document.querySelector(\".btnEnd\");\nconst inputGame = document.querySelector(\".inputGame\");\nbtnScissor.disabled = true;\nbtnRock.disabled = true;\nbtnPaper.disabled = true;\n\nconst WIN = \"WIN\";\nconst LOSE = \"LOSE\";\nconst DRAW = \"DRAW\";\nconst COMPUTER = \"COMPUTER\";\nconst RESET = \"RESET\";\n\n// 상태값 초기화 \nconst initialState = {\n    score: 0,\n    count: 0,\n    win: 0,\n    draw: 0,\n    computers: '',\n}\n\nconst winGame = function(){\n    return { type: WIN }\n}\nconst loseGame = function(){\n    return { type: LOSE }\n}\nconst drawGame = function(){\n    return { type: DRAW }\n}\nconst comGame = function(computers){\n    return { type: COMPUTER, computers}\n}\n\nlet nGame = '';\nconst gameStart = function(){\n    scoreReset()\n    nGame = inputGame.value;\n    if(nGame == ''){\n        nGame = 5;\n    }\n    btnScissor.disabled = false;\n    btnRock.disabled = false;\n    btnPaper.disabled = false;\n    timer.textContent = nGame + \"판 승부 시작!\"\n}\n\nconst gameEnd = function(){\n    const result = store.getState();\n    myScore.textContent = \"게임 종료! \"+ result.count +\"판 중 \" + result.win+ \"승(\" + result.draw + \"무)을 거둬 획득한 점수: \" + result.score;\n    btnScissor.disabled = true;\n    btnRock.disabled = true;\n    btnPaper.disabled = true;\n    timer.textContent = \"판 수를 입력하고 게임을 다시 시작하세요!\";\n}\n// let nGame = prompt('가위바위보 게임을 시작합니다! 판 수를 입력하세요: ', '');\n// console.log(nGame);\n\nexport const reducer = (state=initialState, action) => {\n    // console.log(action);\n    switch(action.type){\n        case WIN:\n            return {...state, score: state.score + 1, count: state.count + 1, win: state.win + 1};\n        case LOSE:\n            return {...state, score: state.score - 1, count: state.count + 1};\n        case DRAW:\n            return {...state, score: state.score, count: state.count + 1, draw: state.draw + 1};\n        case COMPUTER:\n            return {...state, computers: action.computers};\n        case RESET:\n            return state = initialState;\n        default:\n            return state;\n    }\n}\nconst store = createStore(reducer);\n\n\n// setInterval(store.dispatch({type:LOSE}), 5000);\n\nconst arrayRSP = ['ss', 'rr', 'pp']; //ss:가위 rr:바위 pp:보\nconst computerRSP = function(){\n    const random = Math.floor(Math.random()*3);\n    const com = arrayRSP[random];\n    return com;\n}\n\nconst scoreReset = function(){\n    store.dispatch({type: RESET});\n}\nconst showResult = function(){\n    const result = store.getState();\n    let whatcom = result.computers;\n    if(whatcom === \"ss\"){\n        whatcom = \"가위\";\n    }else if(whatcom === \"rr\"){\n        whatcom = \"바위\";\n    }else if(whatcom === \"pp\"){\n        whatcom = \"보\";\n    }\n    if(parseInt(nGame) === result.count){\n        gameEnd()\n    \n    }else if(parseInt(nGame) < result.count){\n        alert(nGame + '판 종료되었습니다. 판 수를 다시 입력하고 게임을 시작하세요!')\n        gameEnd()\n\n    }else{\n        myScore.textContent = \"총 \"+ result.count +\"게임 중 현재 점수: \" + result.score;\n        computerScreen.textContent = \"컴퓨터: \" + whatcom\n    }\n}\n\nstore.subscribe(showResult);\n\nconst onSubmit = function(e){\n    e.preventDefault();\n    const result = store.getState();\n    const mine = e.target.id;\n    const computers = computerRSP();\n    store.dispatch(comGame(computers));\n    if(mine === computers){\n        store.dispatch(drawGame());\n    }else{\n        if(mine+computers === \"sspp\"){\n            store.dispatch(winGame());\n        }if(mine+computers === \"rrss\"){\n            store.dispatch(winGame());\n        }if(mine+computers === \"pprr\"){\n            store.dispatch(winGame());\n        }if(mine+computers === \"ssrr\"){\n            store.dispatch(loseGame());\n        }if(mine+computers === \"rrpp\"){\n            store.dispatch(loseGame());\n        }if(mine+computers === \"ppss\"){\n            store.dispatch(loseGame());\n        }\n    }\n    showResult();\n}\n\nbtnScissor.addEventListener(\"click\", onSubmit);\nbtnRock.addEventListener(\"click\", onSubmit);\nbtnPaper.addEventListener(\"click\", onSubmit);\nbtnStart.addEventListener(\"click\", gameStart);\nbtnEnd.addEventListener(\"click\", gameEnd);"],"sourceRoot":""}